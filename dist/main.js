!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";var i,r,n,a;s.r(e),function(t){t.Subscribed="SUBSCRIBED",t.Error="ERROR",t.Pending="PENDING",t.Warning="WARNING",t.Unsubscribed="UNSUBSCRIBED"}(i||(i={})),function(t){t.Ready="READY",t.Down="DOWN",t.Warming="WARMUP",t.Error="ERROR"}(r||(r={})),function(t){t.VarNotExist="VAR-NOT-EXIST",t.WontSubcribe="WONT-SUB",t.CantSubcribe="CANT-SUB",t.CantUnSubcribe="CANT-UNSUB",t.BadValue="BAD-VALUE",t.NoNetwork="NO-NETWORK",t.NetError="NET-ERROR",t.Unauthorized="UNAUTHORIZED",t.BadReq="BAD-REQUEST",t.ServerError="SERVER-ERROR",t.NotFound="NOT-FOUND",t.BadData="BAD-DATA",t.EngineNotExist="NO-ENGINE",t.UnknownError="UKNOWN"}(n||(n={})),function(t){t.Write="WRITE",t.Read="READ",t.Subscribe="SUBSCRIBE",t.Unsubscribe="UNSUBSCRIBE",t.Update="UPDATE",t.Init="INITIALIZE",t.Unknown="UNKNOWN"}(a||(a={}));class o{constructor(t,e,s="",i=""){if("string"!=typeof e)throw TypeError("Code must be a string");if("string"!=typeof t)throw TypeError("sysName must be a string");this.code=e,this.timestamp_ms=Date.now(),this.systemName=t,this.action=i||"",this.targetName=s||"",this.ack=!1,this.message=this.buildDefaultMessage()}buildDefaultMessage(){let t=`Error in system (${this.systemName})`;return""!==this.action&&(t+=` during ${this.action}`),""!==this.targetName&&(t+=` on target (${this.targetName})`),t+=`. Error Code: ${this.code}.`}}class l{constructor(t){this.system=t.system,this.name=t.name,this.value=null,this.status=null}}class h{constructor(t,e,s,i=null){this.error=null,this.success=t,this.name=e,this.value=i,this.system=s}setError(t,e=""){this.error={code:t,message:e}}}var c=(t,e)=>{const s=["sort","reverse","splice","pop","unshift","shift","push"];let i=!1;const r={get(t,e,s){try{return"prototype"===e?Reflect.get(t,e,s):new Proxy(t[e],r)}catch(i){return Reflect.get(t,e,s)}},defineProperty(t,s,r){const n=Reflect.defineProperty(t,s,r);return i||e(),n},deleteProperty(t,s){const r=Reflect.deleteProperty(t,s);return i||e(),r},apply(t,r,n){if(s.includes(t.name)){i=!0;const s=Reflect.apply(t,r,n);return e(),i=!1,s}return Reflect.apply(t,r,n)}};return new Proxy(t,r)},d=!1,u=!1;const p=new Map;class m{constructor(t){if(this.name=t,this.callbackMap=new Map,"string"!=typeof this.name)throw Error("Variable name must be a string.")}lock_callbacks(){if(d)throw this.unlock_callbacks(),Error("Forbidden multiple-update during an update callback loop.");d=!0}unlock_callbacks(){d=!1}_call_watchers(t){for(let e of this.callbackMap.values())void 0===t?e():e(t)}attachWatcher(t,e){if(null==t)throw Error("Target is undefined.");this.callbackMap.set(t,e)}detachWatcher(t){if(null==t)throw Error("Target is undefined.");this.callbackMap.delete(t)}}class _ extends m{constructor(t,e){super(t),"function"==typeof e&&(this.usrDefined_transition=e)}usrDefined_transition(t){}applyTransition(t){this.lock_callbacks();try{u=!0,this.usrDefined_transition(t),u=!1,this._call_watchers(t);for(let t of p.values())t()}catch(t){throw p.clear(),this.unlock_callbacks(),new Error(t.message)}p.clear(),this.unlock_callbacks()}}class y extends m{constructor(t,e){super(t),this.type=typeof e,this.default_val=e,this._err_on_value="Wrong type assignment to state variable: "+this.name,this._valueProxy=void 0,this._auto_valueProxy=void 0,this.allowStandaloneAssign=!0,this.transitionMap=new Map;if(!["string","object","number","boolean"].includes(this.type))throw TypeError(this._err_on_value);this._val=this.GET()||this.CREATE(this.default_val),this._set_proxies()}_set_proxies(){"object"===this.type&&"object"==typeof this._val&&(this._valueProxy=c(this._val,this.updateWatcherIfAllowed.bind(this)),this._auto_valueProxy=c(this._val,this._markForWatchersUpdate.bind(this)))}set value(t){this._checkIsAllowed(),this._val=t,this._set_proxies(),u?this._markForWatchersUpdate():this.updateWatchers()}get value(){return u?"object"===this.type?this._auto_valueProxy:this._val:"object"===this.type?this._valueProxy:this._val}CREATE(t){if(typeof t!==this.type)throw TypeError(this._err_on_value);{let e="string"!==this.type?JSON.stringify(t):t;localStorage.setItem(this.name,e)}return t}UPDATE_DATA(){if(typeof this._val!==this.type)throw u&&(u=!1),d&&this.unlock_callbacks(),TypeError(this._err_on_value);{let t="string"!==this.type?JSON.stringify(this._val):this._val;localStorage.setItem(this.name,t)}}RESET(){this.value=this.default_val}GET(){let t=localStorage.getItem(this.name);if(null===t)return t;if("string"!==this.type&&typeof(t=JSON.parse(t))!==this.type)throw TypeError("State variable: "+this.name+" is corrupted, returns type "+typeof t+" expecting "+this.type);return t}_markForWatchersUpdate(){this.UPDATE_DATA(),p.set(this,this._call_watchers.bind(this))}_checkIsAllowed(){if(!this.allowStandaloneAssign&&!u)throw u&&(u=!1),"StateVariable "+this.name+" is not allowed assignment outside a state transition"}updateWatcherIfAllowed(){this._checkIsAllowed(),this.updateWatchers()}updateWatchers(){this.lock_callbacks();try{this.UPDATE_DATA(),this._call_watchers()}catch(t){throw this.unlock_callbacks(),new Error(t.message)}this.unlock_callbacks()}addTransition(t,e){let s=new _(t);"function"==typeof e&&(s.usrDefined_transition=e.bind(this),this.transitionMap.set(t,s),this.allowStandaloneAssign=!1)}applyTransition(t,e){if(!this.transitionMap.has(t))throw Error(`Transition ${t} not found`);this.transitionMap.get(t).applyTransition(e)}}class g extends m{sendMessage(t){this._call_watchers(t)}}let f=(t,e)=>(class extends e{constructor(){super(),this._transitionMap=new Map,this._messageMap=new Map,this._extractTransitions(),this._addGetterSetters()}_extractTransitions(){for(let e=0;e<t.length;e++){let s=t[e];if(s instanceof y)for(let e of s.transitionMap.values())t.push(e)}}applyTransition(t,e){if(!this._transitionMap.has(t))throw Error(`Transition ${t} not found`);this._transitionMap.get(t)(e)}sendMessageOnChannel(t,e){if(!this._messageMap.has(t))throw Error(`Message channel ${t} not found`);this._messageMap.get(t)(e)}_addGetterSetters(){for(let e of t)if(e instanceof y)"object"===e.type&&(this[`_${e.name}Proxy`]=c(e._val,()=>{throw`${e.name} cannot be assigned from a custom element`})),Object.defineProperty(this,e.name,{set:t=>{throw`${e.name} cannot be assigned from a custom element`},get:()=>"object"===e.type?this[`_${e.name}Proxy`]:e._val});else if(e instanceof g)this._messageMap.set(e.name,e.sendMessage.bind(e));else{if(!(e instanceof _))throw TypeError("Accept only StateVariable, StateTransition or Message.");this._transitionMap.set(e.name,e.applyTransition.bind(e))}}disconnectedCallback(){void 0!==super.disconnectedCallback&&super.disconnectedCallback();for(let e of t)e.detachWatcher(this)}});let b=(t,e)=>(class extends(f(t,e)){connectedCallback(){void 0!==super.connectedCallback&&super.connectedCallback();for(let e of t)e instanceof g?this[`gotMessage_${e.name}`]&&e.attachWatcher(this,this[`gotMessage_${e.name}`].bind(this)):e.attachWatcher(this,this._stateRequestUpdate(e.name).bind(this))}_stateRequestUpdate(t){return function(){this[`on_${t}_update`]&&this[`on_${t}_update`](),this.requestUpdate()}}});const{replace:v}="",S=/[&<>'"]/g,w={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"},E=t=>w[t],x=t=>v.call(t,S,E);class N extends y{constructor(){super("datatree",{}),this.addTransition("create",this._create),this.addTransition("update",this._update),this.addTransition("multiupdate",this._multiupdate)}GetVar(t){return this.ExistVar(t)?this.value[t.system][t.name]:null}Create(t){this.applyTransition("create",t)}UpdateStatus(t,e){let s=new l(t);s.status=e,this.applyTransition("update",s)}Update(t){Array.isArray(t)?this.applyTransition("multiupdate",t):this.applyTransition("update",t)}_create(t){if(t&&"string"==typeof t.system&&"string"==typeof t.name){t.system=x(t.system),t.name=x(t.name);let e={status:null,value:null};e.status=i.Pending,this.value.hasOwnProperty(t.system)||(this.value[t.system]={}),this.value[t.system][t.name]=e}}_multiupdate(t){t.forEach(t=>{this._update(t)})}_update(t){this._checkVarType(t);let e=this.GetVar(t);if(!e)throw new Error("Requested Variable does not exist: "+t.name);"string"==typeof t.value&&(t.value=x(t.value)),t.status&&(e.status=x(t.status)),null!==t.value&&void 0!==t.value&&(e.value=t.value)}_checkVarType(t){if(!t)throw new TypeError("Variable cannot be null");if("string"!=typeof t.name)throw new TypeError("Variable Name must be a string")}ExistVar(t){return("string"==typeof t.system||"string"==typeof t.name)&&(!!this.value.hasOwnProperty(t.system)&&!!this.value[t.system].hasOwnProperty(t.name))}}class P extends y{constructor(t){super(t,[]),this.errorExpiry_days=7,this.addTransition("create",this._create),this.addTransition("ack",this._ack),this.addTransition("clean",this._cleanup),this.swipe_interval_ID=window.setInterval(()=>{this.applyTransition("clean")},1e4)}GetAll(){return this.value}setSwipeInterval(t){clearInterval(this.swipe_interval_ID),this.swipe_interval_ID=window.setInterval(()=>{this.applyTransition("clean")},t)}Create(t){if(!(t instanceof o))throw TypeError("input must be a 'systemError' instance.");this.applyTransition("create",t)}_create(t){let e={code:x(t.code),message:x(t.message),systemName:x(t.systemName),targetName:x(t.targetName),action:x(t.action),timestamp_ms:t.timestamp_ms,ack:t.ack};this.value.push(e)}Acknoweldge(t){this.applyTransition("ack",t)}_ack(t){let e=this.value[t];if(!e)throw Error(`Error ID '${t}' does not exist`);e.ack=!0}GetUnack(){return this.value.filter(t=>!t.ack)}CleanAll(){this.applyTransition("clean",!0)}_cleanup(t){if(0===this.value.lenght)return;if(t)return void(this.value=[]);let e=this.value.filter(t=>t.timestamp_ms+864e5*this.errorExpiry_days>Date.now());e.length<this.value.length&&(this.value=e)}}var T=new class{constructor(){this.dataTree=new N,this.errorTray=new P("errortray"),this.dataEngines=new Map,this.status=r.Down,this._initPromise=new Promise(t=>{this._initResolve=t}),this._defaultEngine=null}AddEngine(t){let e=x(t.name);this.dataEngines.set(e,t),null===this._defaultEngine&&(this._defaultEngine=t)}SetDefeultEngine(t){this.dataEngines.has(t.name)||this.AddEngine(t),this._defaultEngine=t}GetEngine(t){if("string"!=typeof t)throw Error("Engine Name must be a string");return"default"===t.toLocaleLowerCase()?this._defaultEngine:this.dataEngines.get(t)}async Subscribe(t,e){if("string"!=typeof e.name||"string"!=typeof e.system)throw Error("CANNOT SUBSCRIBE variable "+e.name);await this.isInitialized(),e.name=x(e.name),e.system=x(e.system);let s=this.GetEngine(t);if(!s)throw this.dataTree.Create(e),this.dataTree.UpdateStatus(e,i.Error),this.CreateAndDispatchError(e.system,n.EngineNotExist,"",a.Subscribe),new Error(`Engine '${t}' does not exist.`);this.dataTree.ExistVar(e)?s.isVarSubscribed(e)||this.dataTree.UpdateStatus(e,i.Pending):this.dataTree.Create(e),s.RequestSubscription(e)}async Unsubscribe(t,e){if("string"!=typeof e.name||"string"!=typeof e.system)throw Error("CANNOT UNSUBSCRIBE variable "+e.name);await this.isInitialized();let s=this.GetEngine(t);if(!s)throw this.CreateAndDispatchError(e.system,n.EngineNotExist,"",a.Unsubscribe),new Error(`Engine '${t}' does not exist.`);s.RequestUnsubscription(e)}Update(t){this.dataTree.Update(t)}async Read(t,e){if("object"!=typeof e)throw new TypeError("'system' must be a string and 'vars' an array of strings");await this.isInitialized();let s=this.GetEngine(t);if(s){let t=await s.Read(e);return s.UpdateVars(t,i.Subscribed,a.Read),t}throw this.CreateAndDispatchError(t,n.EngineNotExist,"",a.Read),new Error(`Engine '${t}' does not exist.`)}async Write(t,e,s){if("object"!=typeof e||"object"!=typeof s)throw new TypeError("'system' must be a string and 'vars' and values cannot be null");await this.isInitialized();let r=this.GetEngine(t);if(r){let t=e.map(t=>{let e=new l(t);return e.status=i.Pending,e});this.dataTree.Update(t);let n=await r.Write(e,s);return r.UpdateVars(n,i.Subscribed,a.Write),n}throw this.CreateAndDispatchError(t,n.EngineNotExist,"",a.Write),new Error(`Engine '${t}' does not exist.`)}DispatchError(t){this.errorTray.Create(t)}CreateAndDispatchError(t,e,s="",i=""){let r=new o(t,e,s,i);this.DispatchError(r)}async Init(){this._initResolve(),this.status=r.Warming;let t=[];Array.from(this.dataEngines.values()).forEach(e=>t.push(e._init())),await Promise.all(t),this.status=r.Ready}isInitialized(){return this._initPromise}};class C{constructor(t){this.manager=T,this.status=r.Down,this.toBeSubscribed=new Map,this.toBeUnsubscribed=new Set,this.subscribedVar=new Map,this.sub_timerID=null,this.unsub_timerID=null,this.aggregationTime_ms=10,this.name=t||"DataEngine",this.VarDispatchErrorCases=[n.VarNotExist,n.WontSubcribe,n.Unauthorized,n.UnknownError,n.CantUnSubcribe],this.VarErrorNoActCases=[n.BadValue,n.CantUnSubcribe,n.Unauthorized],this.VarErrorUnsubCases=[n.CantSubcribe,n.NoNetwork]}serializeSysObject(t){return"string"!=typeof t.name||t.name.includes(":")||"string"!=typeof t.system||t.system.includes(":")?null:t.system+":"+t.name}deserializeSysObject(t){let e=t.split(":");return 2!==e.length?null:{system:e[0],name:e[1]}}RequestSubscription(t){let e=this.serializeSysObject(t);if(null===e)throw Error("CANNOT SUBSCRIBE variable "+t.name);if(this.subscribedVar.has(e)){let t=this.subscribedVar.get(e);return void this.subscribedVar.set(e,t+1)}let s=this.toBeSubscribed.get(e)||0;this.toBeSubscribed.set(e,s+1),this.status!==r.Down&&this.status!==r.Warming&&(this.sub_timerID&&clearTimeout(this.sub_timerID),this.sub_timerID=window.setTimeout(this._subcribe.bind(this),this.aggregationTime_ms))}RequestUnsubscription(t){let e=this.serializeSysObject(t);if(null===e||!this.subscribedVar.has(e))throw Error("CANNOT UNSUBSCRIBE variable "+t.name);let s=this.subscribedVar.get(e);s>1?this.subscribedVar.set(e,s-1):(this.toBeUnsubscribed.add(e),this.unsub_timerID&&clearTimeout(this.unsub_timerID),this.unsub_timerID=window.setTimeout(this._unsubcribe.bind(this),this.aggregationTime_ms))}async _subcribe(){let t=Array.from(this.toBeSubscribed.keys()).map(t=>this.deserializeSysObject(t)),e=await this.Subscribe(t);this.updateSubscriberLists(e),this.UpdateVars(e,i.Subscribed,a.Subscribe)}updateSubscriberLists(t){for(let e of t){let t=this.serializeSysObject(e);if(e.success){let e=this.toBeSubscribed.get(t);e+=this.subscribedVar.get(t)||0,this.subscribedVar.set(t,e),this.toBeSubscribed.delete(t)}else{let s=e.error?e.error.code:n.UnknownError;s!==n.NoNetwork&&s!==n.CantSubcribe&&this.toBeSubscribed.delete(t)}}}isVarSubscribed(t){let e=this.serializeSysObject(t);return this.subscribedVar.has(e)}UpdateVars(t,e,s=""){let r=[];for(let a of t){let t=new l(a);if(a.success)t.status=e,null!==a.value&&void 0!==a.value&&(t.value=a.value);else{let e=a.error?a.error.code:n.UnknownError;if(this.VarDispatchErrorCases.includes(e)&&this.manager.CreateAndDispatchError(a.system,e,a.name,s),this.VarErrorUnsubCases.includes(e))t.status=i.Unsubscribed;else if(this.VarErrorNoActCases.includes(e)){let e=this.manager.dataTree.GetVar(a);t.status=e.status===i.Pending?i.Subscribed:null}else t.status=i.Error}r.push(t)}this.manager.Update(r)}async _unsubcribe(){let t=Array.from(this.toBeUnsubscribed).map(t=>this.deserializeSysObject(t)),e=await this.Unsubscribe(t);for(let t of e){let e=this.serializeSysObject(t);t.success&&this.subscribedVar.delete(e),this.toBeUnsubscribed.delete(e)}this.UpdateVars(e,i.Unsubscribed,a.Unsubscribe)}async _init(){this.status=r.Warming;let t=await this.Initialize();if(t.success)this.status=r.Ready;else{this.status=r.Error;let e=t.error?t.error.code:n.UnknownError,s=new o(this.name,e,this.name,a.Init);this.manager.DispatchError(s)}this.toBeSubscribed.size>0&&this._subcribe()}UpdateData(t){this.manager.Update(t)}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const A="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,U=(t,e,s=null)=>{for(;e!==s;){const s=e.nextSibling;t.removeChild(e),e=s}},k=`{{lit-${String(Math.random()).slice(2)}}}`,V=`\x3c!--${k}--\x3e`,R=new RegExp(`${k}|${V}`),O="$lit$";class M{constructor(t,e){this.parts=[],this.element=e;const s=[],i=[],r=document.createTreeWalker(e.content,133,null,!1);let n=0,a=-1,o=0;const{strings:l,values:{length:h}}=t;for(;o<h;){const t=r.nextNode();if(null!==t){if(a++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:s}=e;let i=0;for(let t=0;t<s;t++)I(e[t].name,O)&&i++;for(;i-- >0;){const e=l[o],s=W.exec(e)[2],i=s.toLowerCase()+O,r=t.getAttribute(i);t.removeAttribute(i);const n=r.split(R);this.parts.push({type:"attribute",index:a,name:s,strings:n}),o+=n.length-1}}"TEMPLATE"===t.tagName&&(i.push(t),r.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(k)>=0){const i=t.parentNode,r=e.split(R),n=r.length-1;for(let e=0;e<n;e++){let s,n=r[e];if(""===n)s=B();else{const t=W.exec(n);null!==t&&I(t[2],O)&&(n=n.slice(0,t.index)+t[1]+t[2].slice(0,-O.length)+t[3]),s=document.createTextNode(n)}i.insertBefore(s,t),this.parts.push({type:"node",index:++a})}""===r[n]?(i.insertBefore(B(),t),s.push(t)):t.data=r[n],o+=n}}else if(8===t.nodeType)if(t.data===k){const e=t.parentNode;null!==t.previousSibling&&a!==n||(a++,e.insertBefore(B(),t)),n=a,this.parts.push({type:"node",index:a}),null===t.nextSibling?t.data="":(s.push(t),a--),o++}else{let e=-1;for(;-1!==(e=t.data.indexOf(k,e+1));)this.parts.push({type:"node",index:-1}),o++}}else r.currentNode=i.pop()}for(const t of s)t.parentNode.removeChild(t)}}const I=(t,e)=>{const s=t.length-e.length;return s>=0&&t.slice(s)===e},D=t=>-1!==t.index,B=()=>document.createComment(""),W=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/,j=133;function $(t,e){const{element:{content:s},parts:i}=t,r=document.createTreeWalker(s,j,null,!1);let n=z(i),a=i[n],o=-1,l=0;const h=[];let c=null;for(;r.nextNode();){o++;const t=r.currentNode;for(t.previousSibling===c&&(c=null),e.has(t)&&(h.push(t),null===c&&(c=t)),null!==c&&l++;void 0!==a&&a.index===o;)a.index=null!==c?-1:a.index-l,a=i[n=z(i,n)]}h.forEach(t=>t.parentNode.removeChild(t))}const q=t=>{let e=11===t.nodeType?0:1;const s=document.createTreeWalker(t,j,null,!1);for(;s.nextNode();)e++;return e},z=(t,e=-1)=>{for(let s=e+1;s<t.length;s++){const e=t[s];if(D(e))return s}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const F=new WeakMap,L=t=>"function"==typeof t&&F.has(t),H={},G={};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class J{constructor(t,e,s){this.__parts=[],this.template=t,this.processor=e,this.options=s}update(t){let e=0;for(const s of this.__parts)void 0!==s&&s.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=A?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],s=this.template.parts,i=document.createTreeWalker(t,133,null,!1);let r,n=0,a=0,o=i.nextNode();for(;n<s.length;)if(r=s[n],D(r)){for(;a<r.index;)a++,"TEMPLATE"===o.nodeName&&(e.push(o),i.currentNode=o.content),null===(o=i.nextNode())&&(i.currentNode=e.pop(),o=i.nextNode());if("node"===r.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(o.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(o,r.name,r.strings,this.options));n++}else this.__parts.push(void 0),n++;return A&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const K=` ${k} `;class Z{constructor(t,e,s,i){this.strings=t,this.values=e,this.type=s,this.processor=i}getHTML(){const t=this.strings.length-1;let e="",s=!1;for(let i=0;i<t;i++){const t=this.strings[i],r=t.lastIndexOf("\x3c!--");s=(r>-1||s)&&-1===t.indexOf("--\x3e",r+1);const n=W.exec(t);e+=null===n?t+(s?K:V):t.substr(0,n.index)+n[1]+n[2]+O+n[3]+k}return e+=this.strings[t]}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const Q=t=>null===t||!("object"==typeof t||"function"==typeof t),X=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class Y{constructor(t,e,s){this.dirty=!0,this.element=t,this.name=e,this.strings=s,this.parts=[];for(let t=0;t<s.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new tt(this)}_getValue(){const t=this.strings,e=t.length-1;let s="";for(let i=0;i<e;i++){s+=t[i];const e=this.parts[i];if(void 0!==e){const t=e.value;if(Q(t)||!X(t))s+="string"==typeof t?t:String(t);else for(const e of t)s+="string"==typeof e?e:String(e)}}return s+=t[e]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class tt{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===H||Q(t)&&t===this.value||(this.value=t,L(t)||(this.committer.dirty=!0))}commit(){for(;L(this.value);){const t=this.value;this.value=H,t(this)}this.value!==H&&this.committer.commit()}}class et{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(B()),this.endNode=t.appendChild(B())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=B()),t.__insert(this.endNode=B())}insertAfterPart(t){t.__insert(this.startNode=B()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;L(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=H,t(this)}const t=this.__pendingValue;t!==H&&(Q(t)?t!==this.value&&this.__commitText(t):t instanceof Z?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):X(t)?this.__commitIterable(t):t===G?(this.value=G,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,s="string"==typeof(t=null==t?"":t)?t:String(t);e===this.endNode.previousSibling&&3===e.nodeType?e.data=s:this.__commitNode(document.createTextNode(s)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof J&&this.value.template===e)this.value.update(t.values);else{const s=new J(e,t.processor,this.options),i=s._clone();s.update(t.values),this.__commitNode(i),this.value=s}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let s,i=0;for(const r of t)void 0===(s=e[i])&&(s=new et(this.options),e.push(s),0===i?s.appendIntoPart(this):s.insertAfterPart(e[i-1])),s.setValue(r),s.commit(),i++;i<e.length&&(e.length=i,this.clear(s&&s.endNode))}clear(t=this.startNode){U(this.startNode.parentNode,t.nextSibling,this.endNode)}}class st{constructor(t,e,s){if(this.value=void 0,this.__pendingValue=void 0,2!==s.length||""!==s[0]||""!==s[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=s}setValue(t){this.__pendingValue=t}commit(){for(;L(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=H,t(this)}if(this.__pendingValue===H)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=H}}class it extends Y{constructor(t,e,s){super(t,e,s),this.single=2===s.length&&""===s[0]&&""===s[1]}_createPart(){return new rt(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class rt extends tt{}let nt=!1;(()=>{try{const t={get capture(){return nt=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class at{constructor(t,e,s){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=s,this.__boundHandleEvent=t=>this.handleEvent(t)}setValue(t){this.__pendingValue=t}commit(){for(;L(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=H,t(this)}if(this.__pendingValue===H)return;const t=this.__pendingValue,e=this.value,s=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),i=null!=t&&(null==e||s);s&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),i&&(this.__options=ot(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=H}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const ot=t=>t&&(nt?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function lt(t){let e=ht.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},ht.set(t.type,e));let s=e.stringsArray.get(t.strings);if(void 0!==s)return s;const i=t.strings.join(k);return void 0===(s=e.keyString.get(i))&&(s=new M(t,t.getTemplateElement()),e.keyString.set(i,s)),e.stringsArray.set(t.strings,s),s}const ht=new Map,ct=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const dt=new
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class{handleAttributeExpressions(t,e,s,i){const r=e[0];return"."===r?new it(t,e.slice(1),s).parts:"@"===r?[new at(t,e.slice(1),i.eventContext)]:"?"===r?[new st(t,e.slice(1),s)]:new Y(t,e,s).parts}handleTextExpression(t){return new et(t)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const ut=(t,...e)=>new Z(t,e,"html",dt),pt=(t,e)=>`${t}--${e}`;let mt=!0;void 0===window.ShadyCSS?mt=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),mt=!1);const _t=t=>e=>{const s=pt(e.type,t);let i=ht.get(s);void 0===i&&(i={stringsArray:new WeakMap,keyString:new Map},ht.set(s,i));let r=i.stringsArray.get(e.strings);if(void 0!==r)return r;const n=e.strings.join(k);if(void 0===(r=i.keyString.get(n))){const s=e.getTemplateElement();mt&&window.ShadyCSS.prepareTemplateDom(s,t),r=new M(e,s),i.keyString.set(n,r)}return i.stringsArray.set(e.strings,r),r},yt=["html","svg"],gt=new Set,ft=(t,e,s)=>{gt.add(t);const i=s?s.element:document.createElement("template"),r=e.querySelectorAll("style"),{length:n}=r;if(0===n)return void window.ShadyCSS.prepareTemplateStyles(i,t);const a=document.createElement("style");for(let t=0;t<n;t++){const e=r[t];e.parentNode.removeChild(e),a.textContent+=e.textContent}(t=>{yt.forEach(e=>{const s=ht.get(pt(e,t));void 0!==s&&s.keyString.forEach(t=>{const{element:{content:e}}=t,s=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{s.add(t)}),$(t,s)})})})(t);const o=i.content;s?function(t,e,s=null){const{element:{content:i},parts:r}=t;if(null==s)return void i.appendChild(e);const n=document.createTreeWalker(i,j,null,!1);let a=z(r),o=0,l=-1;for(;n.nextNode();)for(l++,n.currentNode===s&&(o=q(e),s.parentNode.insertBefore(e,s));-1!==a&&r[a].index===l;){if(o>0){for(;-1!==a;)r[a].index+=o,a=z(r,a);return}a=z(r,a)}}(s,a,o.firstChild):o.insertBefore(a,o.firstChild),window.ShadyCSS.prepareTemplateStyles(i,t);const l=o.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==l)e.insertBefore(l.cloneNode(!0),e.firstChild);else if(s){o.insertBefore(a,o.firstChild);const t=new Set;t.add(a),$(s,t)}};window.JSCompiler_renameProperty=(t,e)=>t;const bt={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},vt=(t,e)=>e!==t&&(e==e||t==t),St={attribute:!0,type:String,converter:bt,reflect:!1,hasChanged:vt},wt=1,Et=4,xt=8,Nt=16,Pt="finalized";class Tt extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,s)=>{const i=this._attributeNameForProperty(s,e);void 0!==i&&(this._attributeToPropertyMap.set(i,s),t.push(i))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=St){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const s="symbol"==typeof t?Symbol():`__${t}`,i=this.getPropertyDescriptor(t,s,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}static getPropertyDescriptor(t,e,s){return{get(){return this[e]},set(s){const i=this[t];this[e]=s,this._requestUpdate(t,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||St}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty(Pt)||t.finalize(),this[Pt]=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const s of e)this.createProperty(s,t[s])}}static _attributeNameForProperty(t,e){const s=e.attribute;return!1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,s=vt){return s(t,e)}static _propertyValueFromAttribute(t,e){const s=e.type,i=e.converter||bt,r="function"==typeof i?i:i.fromAttribute;return r?r(t,s):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const s=e.type,i=e.converter;return(i&&i.toAttribute||bt.toAttribute)(t,s)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,s){e!==s&&this._attributeToProperty(t,s)}_propertyToAttribute(t,e,s=St){const i=this.constructor,r=i._attributeNameForProperty(t,s);if(void 0!==r){const t=i._propertyValueToAttribute(e,s);if(void 0===t)return;this._updateState=this._updateState|xt,null==t?this.removeAttribute(r):this.setAttribute(r,t),this._updateState=this._updateState&~xt}}_attributeToProperty(t,e){if(this._updateState&xt)return;const s=this.constructor,i=s._attributeToPropertyMap.get(t);if(void 0!==i){const t=s.getPropertyOptions(i);this._updateState=this._updateState|Nt,this[i]=s._propertyValueFromAttribute(e,t),this._updateState=this._updateState&~Nt}}_requestUpdate(t,e){let s=!0;if(void 0!==t){const i=this.constructor,r=i.getPropertyOptions(t);i._valueHasChanged(this[t],e,r.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==r.reflect||this._updateState&Nt||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,r))):s=!1}!this._hasRequestedUpdate&&s&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){this._updateState=this._updateState|Et;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return this._updateState&Et}get hasUpdated(){return this._updateState&wt}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{(t=this.shouldUpdate(e))?this.update(e):this._markUpdated()}catch(e){throw t=!1,this._markUpdated(),e}t&&(this._updateState&wt||(this._updateState=this._updateState|wt,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~Et}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}Tt[Pt]=!0;
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const Ct="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,At=Symbol();class Ut{constructor(t,e){if(e!==At)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){return void 0===this._styleSheet&&(Ct?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const kt=(t,...e)=>{const s=e.reduce((e,s,i)=>e+(t=>{if(t instanceof Ut)return t.cssText;if("number"==typeof t)return t;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${t}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(s)+t[i+1],t[0]);return new Ut(s,At)};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const Vt={};class Rt extends Tt{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const e=(t,s)=>t.reduceRight((t,s)=>Array.isArray(s)?e(s,t):(t.add(s),t),s),s=e(t,new Set),i=[];s.forEach(t=>i.unshift(t)),this._styles=i}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?Ct?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const e=this.render();super.update(t),e!==Vt&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){return Vt}}Rt.finalized=!0,Rt.render=(t,e,s)=>{if(!s||"object"!=typeof s||!s.scopeName)throw new Error("The `scopeName` option is required.");const i=s.scopeName,r=ct.has(e),n=mt&&11===e.nodeType&&!!e.host,a=n&&!gt.has(i),o=a?document.createDocumentFragment():e;if(((t,e,s)=>{let i=ct.get(e);void 0===i&&(U(e,e.firstChild),ct.set(e,i=new et(Object.assign({templateFactory:lt},s))),i.appendInto(e)),i.setValue(t),i.commit()})(t,o,Object.assign({templateFactory:_t(i)},s)),a){const t=ct.get(o);ct.delete(o);const s=t.value instanceof J?t.value.template:void 0;ft(i,o,s),U(e,e.firstChild),e.appendChild(o),ct.set(e,t)}!r&&n&&window.ShadyCSS.styleElement(e.host)};class Ot extends(b([T.dataTree,T.errorTray],Rt)){constructor(){super(),this.name="",this.system="default",this.engine="default",this._init=!1,this.service_manager=T}static get properties(){return{name:{type:String},system:{type:String},engine:{type:String},status:{type:String}}}get value(){if(this._init)return this.service_manager.dataTree.ExistVar(this)?this.datatree[this.system][this.name].value:null}get status(){return this._init?this.service_manager.dataTree.ExistVar(this)?this.datatree[this.system][this.name].status:i.Error:i.Pending}set status(t){if("string"!=typeof t)return;if(!this.service_manager.dataTree.ExistVar(this))return;const e=this.getAttribute("status");e===t&&e===this.status||this.DataUpdate(null,t)}on_datatree_update(){this.getAttribute("status")!==this.status&&this.setAttribute("status",this.status)}connectedCallback(){super.connectedCallback(),T.Subscribe(this.engine,this).then(()=>{this._init=!0})}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback(),T.Unsubscribe(this.engine,this)}async Write(t){return await this.WriteMultiple([this],[t])}async WriteMultiple(t,e){return await T.Write(this.engine,t,e)}async Read(){return this.ReadMultiple([this])}async ReadMultiple(t){return await T.Read(this.engine,t)}DataUpdate(t,e){let s=new l(this);s.status=e,s.value=t,this.DataUpdateMultiple(s)}DataUpdateMultiple(t){T.Update(t)}}customElements.define("x-loader",class extends Rt{static get styles(){return kt`
            :host{
                display:block;
            }
            path{
                stroke: var(--color, #3498db);
            }
            .loader {
                animation: spin var(--speed,0.7s) linear infinite;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `}render(){return ut`
        <svg class="loader" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
            <path style="fill: none; stroke-width: 75;" d="M 238 38 C 362.264 38 463 138.736 463 263"></path>
        </svg>
        `}});customElements.define("status-switch",class extends Ot{static get styles(){return kt`
        
            :host{
                display: block;
            }
            * {
                display : none;
            }
            x-loader{
                --color : var(--loaderColor);
            }

            [show]{
                display:block;
            }
        `}render(){return ut`
        <x-loader ?show="${this.status===i.Pending}" > </x-loader>
        <slot  ?show="${this.status===i.Subscribed}" name="sub"></slot>
        <slot  ?show="${this.status===i.Unsubscribed}" name="unsub"> </slot>
        <slot  ?show="${this.status===i.Error}" name="error"> </slot>
        `}});customElements.define("bool-color",class extends Ot{static get styles(){return kt`
            :host{
                display:block;
                cursor : pointer;
            }
            *{
                display : none;
            }
            slot {
                cursor : pointer;
            }
            :host([status="ERROR"]) > slot{
                cursor : not-allowed ;
            }
            :host([status="UNSUBSCRIBED"]) > slot{
                cursor : not-allowed ;
            }
            :host([read-only]) > slot{
                cursor : auto ;
            }
            [show]{
                display:block;
            }
            [val="on"]::slotted(*){
                stroke : blue;
                fill : green;
            }
            [val="off"]::slotted(*){
                stroke : blue;
                fill : gray;
            }
            :host([status="ERROR"]) > ::slotted(*){
                stroke : black;
                fill : red;
            }
            :host([status="UNSUBSCRIBED"]) > ::slotted(*){
                stroke : yellow;
            }
        `}render(){return ut`
            <slot val="${this.value?"on":"off"}" 
                  @click="${this.onclick}"
                  ?show="${this.status!==i.Pending}"> Empty Slot</slot>
            <x-loader ?show="${this.status===i.Pending}"></x-loader>
        `}onclick(){let t=this.status;if(this.hasAttribute("read-only")||t===i.Error||t===i.Pending||t===i.Unsubscribed)return;let e=!this.value;this.Write(e)}});
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const Mt="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,It=(t,e,s=null)=>{for(;e!==s;){const s=e.nextSibling;t.removeChild(e),e=s}},Dt=`{{lit-${String(Math.random()).slice(2)}}}`,Bt=`\x3c!--${Dt}--\x3e`,Wt=new RegExp(`${Dt}|${Bt}`),jt="$lit$";class $t{constructor(t,e){this.parts=[],this.element=e;const s=[],i=[],r=document.createTreeWalker(e.content,133,null,!1);let n=0,a=-1,o=0;const{strings:l,values:{length:h}}=t;for(;o<h;){const t=r.nextNode();if(null!==t){if(a++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:s}=e;let i=0;for(let t=0;t<s;t++)qt(e[t].name,jt)&&i++;for(;i-- >0;){const e=l[o],s=Lt.exec(e)[2],i=s.toLowerCase()+jt,r=t.getAttribute(i);t.removeAttribute(i);const n=r.split(Wt);this.parts.push({type:"attribute",index:a,name:s,strings:n}),o+=n.length-1}}"TEMPLATE"===t.tagName&&(i.push(t),r.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(Dt)>=0){const i=t.parentNode,r=e.split(Wt),n=r.length-1;for(let e=0;e<n;e++){let s,n=r[e];if(""===n)s=Ft();else{const t=Lt.exec(n);null!==t&&qt(t[2],jt)&&(n=n.slice(0,t.index)+t[1]+t[2].slice(0,-jt.length)+t[3]),s=document.createTextNode(n)}i.insertBefore(s,t),this.parts.push({type:"node",index:++a})}""===r[n]?(i.insertBefore(Ft(),t),s.push(t)):t.data=r[n],o+=n}}else if(8===t.nodeType)if(t.data===Dt){const e=t.parentNode;null!==t.previousSibling&&a!==n||(a++,e.insertBefore(Ft(),t)),n=a,this.parts.push({type:"node",index:a}),null===t.nextSibling?t.data="":(s.push(t),a--),o++}else{let e=-1;for(;-1!==(e=t.data.indexOf(Dt,e+1));)this.parts.push({type:"node",index:-1}),o++}}else r.currentNode=i.pop()}for(const t of s)t.parentNode.removeChild(t)}}const qt=(t,e)=>{const s=t.length-e.length;return s>=0&&t.slice(s)===e},zt=t=>-1!==t.index,Ft=()=>document.createComment(""),Lt=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/,Ht=133;function Gt(t,e){const{element:{content:s},parts:i}=t,r=document.createTreeWalker(s,Ht,null,!1);let n=Kt(i),a=i[n],o=-1,l=0;const h=[];let c=null;for(;r.nextNode();){o++;const t=r.currentNode;for(t.previousSibling===c&&(c=null),e.has(t)&&(h.push(t),null===c&&(c=t)),null!==c&&l++;void 0!==a&&a.index===o;)a.index=null!==c?-1:a.index-l,a=i[n=Kt(i,n)]}h.forEach(t=>t.parentNode.removeChild(t))}const Jt=t=>{let e=11===t.nodeType?0:1;const s=document.createTreeWalker(t,Ht,null,!1);for(;s.nextNode();)e++;return e},Kt=(t,e=-1)=>{for(let s=e+1;s<t.length;s++){const e=t[s];if(zt(e))return s}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const Zt=new WeakMap,Qt=t=>"function"==typeof t&&Zt.has(t),Xt={},Yt={};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class te{constructor(t,e,s){this.__parts=[],this.template=t,this.processor=e,this.options=s}update(t){let e=0;for(const s of this.__parts)void 0!==s&&s.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=Mt?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],s=this.template.parts,i=document.createTreeWalker(t,133,null,!1);let r,n=0,a=0,o=i.nextNode();for(;n<s.length;)if(r=s[n],zt(r)){for(;a<r.index;)a++,"TEMPLATE"===o.nodeName&&(e.push(o),i.currentNode=o.content),null===(o=i.nextNode())&&(i.currentNode=e.pop(),o=i.nextNode());if("node"===r.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(o.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(o,r.name,r.strings,this.options));n++}else this.__parts.push(void 0),n++;return Mt&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const ee=` ${Dt} `;class se{constructor(t,e,s,i){this.strings=t,this.values=e,this.type=s,this.processor=i}getHTML(){const t=this.strings.length-1;let e="",s=!1;for(let i=0;i<t;i++){const t=this.strings[i],r=t.lastIndexOf("\x3c!--");s=(r>-1||s)&&-1===t.indexOf("--\x3e",r+1);const n=Lt.exec(t);e+=null===n?t+(s?ee:Bt):t.substr(0,n.index)+n[1]+n[2]+jt+n[3]+Dt}return e+=this.strings[t]}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const ie=t=>null===t||!("object"==typeof t||"function"==typeof t),re=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class ne{constructor(t,e,s){this.dirty=!0,this.element=t,this.name=e,this.strings=s,this.parts=[];for(let t=0;t<s.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new ae(this)}_getValue(){const t=this.strings,e=t.length-1;let s="";for(let i=0;i<e;i++){s+=t[i];const e=this.parts[i];if(void 0!==e){const t=e.value;if(ie(t)||!re(t))s+="string"==typeof t?t:String(t);else for(const e of t)s+="string"==typeof e?e:String(e)}}return s+=t[e]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class ae{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===Xt||ie(t)&&t===this.value||(this.value=t,Qt(t)||(this.committer.dirty=!0))}commit(){for(;Qt(this.value);){const t=this.value;this.value=Xt,t(this)}this.value!==Xt&&this.committer.commit()}}class oe{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(Ft()),this.endNode=t.appendChild(Ft())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=Ft()),t.__insert(this.endNode=Ft())}insertAfterPart(t){t.__insert(this.startNode=Ft()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;Qt(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Xt,t(this)}const t=this.__pendingValue;t!==Xt&&(ie(t)?t!==this.value&&this.__commitText(t):t instanceof se?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):re(t)?this.__commitIterable(t):t===Yt?(this.value=Yt,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,s="string"==typeof(t=null==t?"":t)?t:String(t);e===this.endNode.previousSibling&&3===e.nodeType?e.data=s:this.__commitNode(document.createTextNode(s)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof te&&this.value.template===e)this.value.update(t.values);else{const s=new te(e,t.processor,this.options),i=s._clone();s.update(t.values),this.__commitNode(i),this.value=s}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let s,i=0;for(const r of t)void 0===(s=e[i])&&(s=new oe(this.options),e.push(s),0===i?s.appendIntoPart(this):s.insertAfterPart(e[i-1])),s.setValue(r),s.commit(),i++;i<e.length&&(e.length=i,this.clear(s&&s.endNode))}clear(t=this.startNode){It(this.startNode.parentNode,t.nextSibling,this.endNode)}}class le{constructor(t,e,s){if(this.value=void 0,this.__pendingValue=void 0,2!==s.length||""!==s[0]||""!==s[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=s}setValue(t){this.__pendingValue=t}commit(){for(;Qt(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Xt,t(this)}if(this.__pendingValue===Xt)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=Xt}}class he extends ne{constructor(t,e,s){super(t,e,s),this.single=2===s.length&&""===s[0]&&""===s[1]}_createPart(){return new ce(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class ce extends ae{}let de=!1;(()=>{try{const t={get capture(){return de=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class ue{constructor(t,e,s){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=s,this.__boundHandleEvent=t=>this.handleEvent(t)}setValue(t){this.__pendingValue=t}commit(){for(;Qt(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Xt,t(this)}if(this.__pendingValue===Xt)return;const t=this.__pendingValue,e=this.value,s=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),i=null!=t&&(null==e||s);s&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),i&&(this.__options=pe(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=Xt}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const pe=t=>t&&(de?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function me(t){let e=_e.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},_e.set(t.type,e));let s=e.stringsArray.get(t.strings);if(void 0!==s)return s;const i=t.strings.join(Dt);return void 0===(s=e.keyString.get(i))&&(s=new $t(t,t.getTemplateElement()),e.keyString.set(i,s)),e.stringsArray.set(t.strings,s),s}const _e=new Map,ye=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const ge=new
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class{handleAttributeExpressions(t,e,s,i){const r=e[0];return"."===r?new he(t,e.slice(1),s).parts:"@"===r?[new ue(t,e.slice(1),i.eventContext)]:"?"===r?[new le(t,e.slice(1),s)]:new ne(t,e,s).parts}handleTextExpression(t){return new oe(t)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const fe=(t,...e)=>new se(t,e,"html",ge),be=(t,e)=>`${t}--${e}`;let ve=!0;void 0===window.ShadyCSS?ve=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),ve=!1);const Se=t=>e=>{const s=be(e.type,t);let i=_e.get(s);void 0===i&&(i={stringsArray:new WeakMap,keyString:new Map},_e.set(s,i));let r=i.stringsArray.get(e.strings);if(void 0!==r)return r;const n=e.strings.join(Dt);if(void 0===(r=i.keyString.get(n))){const s=e.getTemplateElement();ve&&window.ShadyCSS.prepareTemplateDom(s,t),r=new $t(e,s),i.keyString.set(n,r)}return i.stringsArray.set(e.strings,r),r},we=["html","svg"],Ee=new Set,xe=(t,e,s)=>{Ee.add(t);const i=s?s.element:document.createElement("template"),r=e.querySelectorAll("style"),{length:n}=r;if(0===n)return void window.ShadyCSS.prepareTemplateStyles(i,t);const a=document.createElement("style");for(let t=0;t<n;t++){const e=r[t];e.parentNode.removeChild(e),a.textContent+=e.textContent}(t=>{we.forEach(e=>{const s=_e.get(be(e,t));void 0!==s&&s.keyString.forEach(t=>{const{element:{content:e}}=t,s=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{s.add(t)}),Gt(t,s)})})})(t);const o=i.content;s?function(t,e,s=null){const{element:{content:i},parts:r}=t;if(null==s)return void i.appendChild(e);const n=document.createTreeWalker(i,Ht,null,!1);let a=Kt(r),o=0,l=-1;for(;n.nextNode();)for(l++,n.currentNode===s&&(o=Jt(e),s.parentNode.insertBefore(e,s));-1!==a&&r[a].index===l;){if(o>0){for(;-1!==a;)r[a].index+=o,a=Kt(r,a);return}a=Kt(r,a)}}(s,a,o.firstChild):o.insertBefore(a,o.firstChild),window.ShadyCSS.prepareTemplateStyles(i,t);const l=o.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==l)e.insertBefore(l.cloneNode(!0),e.firstChild);else if(s){o.insertBefore(a,o.firstChild);const t=new Set;t.add(a),Gt(s,t)}};window.JSCompiler_renameProperty=(t,e)=>t;const Ne={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},Pe=(t,e)=>e!==t&&(e==e||t==t),Te={attribute:!0,type:String,converter:Ne,reflect:!1,hasChanged:Pe},Ce=1,Ae=4,Ue=8,ke=16,Ve="finalized";class Re extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,s)=>{const i=this._attributeNameForProperty(s,e);void 0!==i&&(this._attributeToPropertyMap.set(i,s),t.push(i))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=Te){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const s="symbol"==typeof t?Symbol():`__${t}`,i=this.getPropertyDescriptor(t,s,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}static getPropertyDescriptor(t,e,s){return{get(){return this[e]},set(s){const i=this[t];this[e]=s,this._requestUpdate(t,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||Te}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty(Ve)||t.finalize(),this[Ve]=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const s of e)this.createProperty(s,t[s])}}static _attributeNameForProperty(t,e){const s=e.attribute;return!1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,s=Pe){return s(t,e)}static _propertyValueFromAttribute(t,e){const s=e.type,i=e.converter||Ne,r="function"==typeof i?i:i.fromAttribute;return r?r(t,s):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const s=e.type,i=e.converter;return(i&&i.toAttribute||Ne.toAttribute)(t,s)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,s){e!==s&&this._attributeToProperty(t,s)}_propertyToAttribute(t,e,s=Te){const i=this.constructor,r=i._attributeNameForProperty(t,s);if(void 0!==r){const t=i._propertyValueToAttribute(e,s);if(void 0===t)return;this._updateState=this._updateState|Ue,null==t?this.removeAttribute(r):this.setAttribute(r,t),this._updateState=this._updateState&~Ue}}_attributeToProperty(t,e){if(this._updateState&Ue)return;const s=this.constructor,i=s._attributeToPropertyMap.get(t);if(void 0!==i){const t=s.getPropertyOptions(i);this._updateState=this._updateState|ke,this[i]=s._propertyValueFromAttribute(e,t),this._updateState=this._updateState&~ke}}_requestUpdate(t,e){let s=!0;if(void 0!==t){const i=this.constructor,r=i.getPropertyOptions(t);i._valueHasChanged(this[t],e,r.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==r.reflect||this._updateState&ke||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,r))):s=!1}!this._hasRequestedUpdate&&s&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){this._updateState=this._updateState|Ae;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return this._updateState&Ae}get hasUpdated(){return this._updateState&Ce}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{(t=this.shouldUpdate(e))?this.update(e):this._markUpdated()}catch(e){throw t=!1,this._markUpdated(),e}t&&(this._updateState&Ce||(this._updateState=this._updateState|Ce,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~Ae}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}Re[Ve]=!0;
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const Oe="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,Me=Symbol();class Ie{constructor(t,e){if(e!==Me)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){return void 0===this._styleSheet&&(Oe?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const De=(t,...e)=>{const s=e.reduce((e,s,i)=>e+(t=>{if(t instanceof Ie)return t.cssText;if("number"==typeof t)return t;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${t}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(s)+t[i+1],t[0]);return new Ie(s,Me)};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const Be={};class We extends Re{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const e=(t,s)=>t.reduceRight((t,s)=>Array.isArray(s)?e(s,t):(t.add(s),t),s),s=e(t,new Set),i=[];s.forEach(t=>i.unshift(t)),this._styles=i}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?Oe?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const e=this.render();super.update(t),e!==Be&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){return Be}}We.finalized=!0,We.render=(t,e,s)=>{if(!s||"object"!=typeof s||!s.scopeName)throw new Error("The `scopeName` option is required.");const i=s.scopeName,r=ye.has(e),n=ve&&11===e.nodeType&&!!e.host,a=n&&!Ee.has(i),o=a?document.createDocumentFragment():e;if(((t,e,s)=>{let i=ye.get(e);void 0===i&&(It(e,e.firstChild),ye.set(e,i=new oe(Object.assign({templateFactory:me},s))),i.appendInto(e)),i.setValue(t),i.commit()})(t,o,Object.assign({templateFactory:Se(i)},s)),a){const t=ye.get(o);ye.delete(o);const s=t.value instanceof te?t.value.template:void 0;xe(i,o,s),It(e,e.firstChild),e.appendChild(o),ye.set(e,t)}!r&&n&&window.ShadyCSS.styleElement(e.host)};customElements.define("pvr-icon",class extends We{render(){return fe`
        <svg viewBox="251.36 1.721 53.863 51.142" xmlns="http://www.w3.org/2000/svg">
            <g>
            <g>
                <polygon  points="278.2,37.2 253,22.6 253,51.7" style="stroke-miterlimit: 10;"></polygon>
                <polygon  points="278.8,37.2 304,51.7 304,22.6" style="stroke-miterlimit: 10;"></polygon>
            </g>
            <circle cx="278.8" cy="37.2" r="9.6" style="stroke-miterlimit: 10;"></circle>
            <rect x="266.8" y="3.2" class="st0" width="23.9" height="13.9" style="stroke-miterlimit: 10;"></rect>
            <rect x="271.8" y="3.2" class="st3" width="13.9" height="13.9" style="fill:none; stroke-miterlimit: 10;"></rect>
            <line x1="278.8" y1="27.6" x2="278.8" y2="10.1" style="stroke-miterlimit: 10;"></line>
            <line x1="271.8" y1="10.1" x2="285.7" y2="10.1" style="stroke-miterlimit: 10;"></line>
            </g>
        </svg>
        `}});customElements.define("pvd-icon",class extends We{render(){return fe`
        <svg viewBox="140.37 3.264 54.407 50.055" xmlns="http://www.w3.org/2000/svg">
            <g>
            <g>
                <polygon  points="167.1,37.2 141.9,22.6 141.9,51.7" style="stroke-miterlimit: 10;"></polygon>
                <polygon  points="167.7,37.2 192.9,51.7 192.9,22.6" style="stroke-miterlimit: 10;"></polygon>
            </g>
            <circle  cx="167.7" cy="37.2" r="9.6" style="stroke-miterlimit: 10;"></circle>
            <line  x1="167.7" y1="27.6" x2="167.7" y2="12.3" style="stroke-miterlimit: 10;"></line>
            <path  d="M175.4,12.3c0-4.2-3.4-7.7-7.7-7.7S160,8,160,12.3H175.4z" style="stroke-miterlimit: 10;"></path>
            </g>
        </svg>
        `}});customElements.define("valve-pr",class extends We{constructor(){super(),this.name="",this.system="default",this.engine="default"}static get properties(){return{name:{type:String},system:{type:String},engine:{type:String}}}static get styles(){return De`
            :host{
                display:flex;
                flex-direction:column;
                align-items:center;
            }
            div{
                font-family: 'Roboto', sans-serif;
                border : solid 1px gray;
                border-radius: 0.5rem;
                padding:0.3rem;
                margin-bottom : 0.2rem;
                width:100%;
                text-align:center;
            }
            div[err]{
                color : red;
            }
        `}render(){return fe`
            <div>
            <strong >${this.name}</strong>
            </div>
            <bool-color name="${this.name}"  engine="${this.engine}" system="${this.system}"> 
                <pvr-icon></pvr-icon>
            </bool-color>
        `}});let je=new class extends C{constructor(){super(...arguments),this.var_types=new Map}async Initialize(){return{success:!0}}_updateVariables(){let t=[];this.var_types.forEach((e,s)=>{if("number"===e){let e=Math.floor(100*Math.random());t.push(new h(!0,s,"default",e))}}),0!==t.length&&this.UpdateVars(t,i.Subscribed,a.Read)}async Subscribe(t){let e=[];return t.forEach(t=>{let s=document.querySelector(`[name="${t.name}"]`);if("string"!=typeof t.name||""===t.name)return void e.push(new h(!1,t.name,t.system));let i=0;s.tagName.toLowerCase().includes("bool")?(i=Math.random()>.5,this.var_types.set(t.name,"bool")):(i=Math.floor(100*Math.random()),this.var_types.set(t.name,"number")),e.push(new h(!0,t.name,t.system,i))}),e}async Unsubscribe(t){return t.map(t=>new h(!0,t.name,t.system))}async Write(t,e){let s=[];for(let i=0;i<t.length;i++)s.push(new h(!0,t[i].name,t[i].system,e[i]));return s}async Read(t){throw new Error("Method not implemented.")}}("std");T.AddEngine(je),T.Init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,